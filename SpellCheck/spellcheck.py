from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
import json
import os


class SpellCheck:
    """
    A class for checking and correcting spelling errors in text using a pre-defined list of supported languages
    and large language models (LLMs) from OpenAI.

    This class utilizes the `langchain_openai.ChatOpenAI` for interfacing with OpenAI's models, and relies on JSON
    files for maintaining a list of supported languages. It is designed to be easily extendable to include more
    languages or models.

    Attributes:
        allowed_models (list[str]): A list of model names that are allowed for spell checking. Defaults to
            ["gpt-3.5-turbo", "gpt-4", "autre-modèle"].
        valid_languages (list[str]): A list of language names in French that are supported for spell checking.
            Defaults to ["Anglais", "Français", "Espagnol", "Allemand", "Italien"].
        json_path (str): Path to the JSON file containing supported languages and their codes.

    Args:
        api_key (str): the API key for chatgpt
        language (str): The code of the language to be used for spell checking. Must be present in the supported
            languages JSON file.
        model (str, optional): The model to be used for generating corrections. Must be one of the allowed models.
            Defaults to "gpt-3.5-turbo".
        temperature (float, optional): The sampling temperature to be used by the model. Must be a float between 0
            and 1, inclusive, with exactly one decimal place. Defaults to 0.3.
        max (int, optional): The maximum number of tokens to be generated by the model. Must be an integer between
            10 and 10,000, inclusive. Defaults to 1000.

    Methods:
        _load_supported_languages(): Loads the supported languages from the JSON file.
        _save_supported_languages(supported_language): Saves the supported languages to the JSON file.
        add_language(language_code, language_name): Adds a new language to the list of supported languages.
        _create_llm(model, temperature, max): Creates an instance of `ChatOpenAI` with specified parameters.
        _get_language(language): Retrieves the full language name based on the provided language code.
        _prompt(): Generates a chat prompt template for the spell checking interaction.
        __call__(text): Processes the given text for spell checking in the selected language.

    Raises:
        FileNotFoundError: If the JSON file containing supported languages cannot be found.
        ValueError: If invalid arguments are provided for model, temperature, max, or language.
    """
    #todo: utiliser le webscrapping pour completer les deux liste
    allowed_models: list[str] = ["gpt-3.5-turbo", ]
    valid_languages: list[str] = ["Anglais", "Français", "Espagnol", "Allemand", "Italien"]
    json_path: str = os.path.join(
        os.path.split(
            os.path.dirname(
                os.path.abspath(
                    __file__
                )
            )
        )[1],
        "data",
        "supportedLanguage.json"
    )

    def __init__(self, api_key: str, language: str, model: str = "gpt-3.5-turbo", temperature: float = 0.3, max: int = 1000) -> None:
        self.llm = self._create_llm(model, temperature, max, api_key)
        self.selected_language = self._get_language(language)
        self.prompt = self._prompt()

    @classmethod
    def show_supported_language(cls):
        with open(SpellCheck.json_path, 'r') as file:
            for code, language in json.load(file).items():
                print(f"langue = {language}, code = {code}")

    @staticmethod
    def _load_supported_languages() -> dict[str,str] | FileNotFoundError:
        """
        Loads the supported languages from a JSON file.

        Returns:
            dict[str, str]: A dictionary mapping language codes to their full names.
        
        Raises:
            FileNotFoundError: If the JSON file cannot be found at the specified path.
        """
        try:
            with open(SpellCheck.json_path, 'r') as file:
                return json.load(file)
        except FileNotFoundError:
            return {}

    @staticmethod
    def _save_supported_languages(supported_language: dict[str,str]) -> None:
        """
        Saves the supported languages to a JSON file.

        Args:
            supported_language (dict[str, str]): A dictionary mapping language codes to their full names.
        """
        with open(SpellCheck.json_path, 'w') as file:
            json.dump(supported_language, file, indent=4)

    @classmethod
    def add_language(cls, language_code: str, language_name: str) -> None:
        """
        Adds a new language to the supported languages.

        Args:
            language_code (str): The code of the language to add.
            language_name (str): The full name of the language to add.
        
        Raises:
            ValueError: If the language_name is not recognized as a valid language.
        """
        if language_name not in cls.valid_languages:
            raise ValueError("language_name n'est pas reconnue comme une vraie langue.")
        supported_language = cls._load_supported_languages()
        supported_language[language_code] = language_name
        cls._save_supported_languages(supported_language)

    def _create_llm(self, model: str, temperature: float, max: int, api_key: str) -> ChatOpenAI | ValueError:
        """
        Creates an instance of `ChatOpenAI` for spell checking.

        Args:
            model (str): The name of the model to use.
            temperature (float): The sampling temperature for the model.
            max (int): The maximum number of tokens to generate.

        Returns:
            ChatOpenAI: An instance configured for spell checking.

        Raises:
            ValueError: If the model is not in the allowed list, temperature is out of bounds,
                        or max is not within the specified range.
        """
        if model not in self.allowed_models:
            raise ValueError(f"Le modèle doit être parmi les suivants: {self.allowed_models}")
        if not (isinstance(temperature, float) and 0 <= temperature <= 1 and round(temperature, 1) == temperature):
            raise ValueError("La température doit être un float à 1 chiffre après la virgule et comprise entre 0 et 1.")
        if not (isinstance(max, int) and 10 <= max <= 10000):
            raise ValueError("Max doit être un entier compris entre 10 et 10 000.")
        return ChatOpenAI(
            model_name=model,
            temperature=temperature,
            max_tokens=max,
            verbose=True,
            api_key=api_key
        )

    def _get_language(self, language: str) -> str | ValueError:
        """
        Retrieves the full name of the language from a given code.

        Args:
            language (str): The code of the language.

        Returns:
            str: The full name of the language.

        Raises:
            ValueError: If the language code is not supported.
        """
        supported_language = self._load_supported_languages()
        if language not in supported_language:
            raise ValueError("Le code de langue fourni n'est pas supporté.")
        return supported_language.get(language, "Langue non supportée")

    def _prompt(self):
        """
        Generates a chat prompt template for the spell checking interaction.

        Returns:
            ChatPromptTemplate: A template for generating spell check prompts.
        """
        return ChatPromptTemplate.from_messages(
           [
               ("system", "Tu es un assistant servant à me corriger les fautes d'orthographe en {language} dans des mots/textes."),
               ("user", "tomtae"),
               ("ai", "Tomate"),
               ("user", "bonojur commet allez vous"),
               ("ai", "Bonjour comment allez-vous ?"),
               ("user", "{text}")
           ]
       )

    def __call__(self, text: str):
        """
        Processes the given text for spell checking in the selected language.

        Args:
            text (str): The text to be spell checked.

        Returns:
            str: The corrected text.
        """
        parser = StrOutputParser()
        chain = self.prompt | self.llm | parser
        return chain.invoke(
            {
                "language": self.selected_language,
                "text": text
            }
        )


